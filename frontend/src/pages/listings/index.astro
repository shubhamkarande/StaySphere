---
import Layout from '../../layouts/Layout.astro';
import SearchBar from '../../components/SearchBar.astro';
import ListingCard from '../../components/ListingCard.astro';
import FilterSidebar from '../../components/FilterSidebar.astro';

const API_BASE = import.meta.env.PUBLIC_API_URL || 'http://localhost:8000/api';

// Get search parameters
const url = new URL(Astro.request.url);
const searchParams = url.searchParams;

// Build query string for API
const queryParams = new URLSearchParams();
for (const [key, value] of searchParams.entries()) {
  queryParams.append(key, value);
}

let listings = [];
let totalCount = 0;
let currentPage = 1;
let totalPages = 1;

try {
  const response = await fetch(`${API_BASE}/listings?${queryParams.toString()}`);
  if (response.ok) {
    const data = await response.json();
    listings = data.data || [];
    totalCount = data.total || 0;
    currentPage = data.current_page || 1;
    totalPages = data.last_page || 1;
  }
} catch (error) {
  console.error('Failed to fetch listings:', error);
}

const location = searchParams.get('location') || '';
const checkin = searchParams.get('checkin') || '';
const checkout = searchParams.get('checkout') || '';
const guests = searchParams.get('guests') || '';
---

<Layout title={`Search Results - StaySphere`}>
  <main class="min-h-screen bg-gray-50">
    <!-- Search Bar -->
    <div class="bg-white shadow-sm py-6">
      <div class="max-w-7xl mx-auto px-4">
        <SearchBar />
      </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 py-8">
      <div class="flex flex-col lg:flex-row gap-8">
        <!-- Filters Sidebar -->
        <aside class="lg:w-1/4">
          <FilterSidebar />
        </aside>

        <!-- Listings Grid -->
        <div class="lg:w-3/4">
          <!-- Results Header -->
          <div class="flex items-center justify-between mb-6">
            <div>
              <h1 class="text-2xl font-bold text-gray-900">
                {location ? `Stays in ${location}` : 'All Stays'}
              </h1>
              <p class="text-gray-600 mt-1">
                {totalCount} {totalCount === 1 ? 'stay' : 'stays'} found
                {checkin && checkout && ` for ${checkin} - ${checkout}`}
              </p>
            </div>
            
            <div class="flex items-center space-x-4">
              <select class="border border-gray-300 rounded-md px-3 py-2 text-sm">
                <option value="recommended">Recommended</option>
                <option value="price_low">Price: Low to High</option>
                <option value="price_high">Price: High to Low</option>
                <option value="rating">Highest Rated</option>
                <option value="newest">Newest</option>
              </select>
            </div>
          </div>

          <!-- Listings Grid -->
          {listings.length > 0 ? (
            <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
              {listings.map((listing) => (
                <ListingCard listing={listing} />
              ))}
            </div>
          ) : (
            <div class="text-center py-12">
              <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
              </svg>
              <h3 class="mt-2 text-sm font-medium text-gray-900">No stays found</h3>
              <p class="mt-1 text-sm text-gray-500">Try adjusting your search criteria.</p>
            </div>
          )}

          <!-- Pagination -->
          {totalPages > 1 && (
            <div class="flex justify-center mt-12">
              <nav class="flex items-center space-x-2">
                {currentPage > 1 && (
                  <a
                    href={`?${new URLSearchParams({...Object.fromEntries(searchParams), page: (currentPage - 1).toString()}).toString()}`}
                    class="px-3 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50"
                  >
                    Previous
                  </a>
                )}
                
                {Array.from({length: Math.min(5, totalPages)}, (_, i) => {
                  const page = i + Math.max(1, currentPage - 2);
                  if (page > totalPages) return null;
                  
                  return (
                    <a
                      href={`?${new URLSearchParams({...Object.fromEntries(searchParams), page: page.toString()}).toString()}`}
                      class={`px-3 py-2 text-sm font-medium border rounded-md ${
                        page === currentPage
                          ? 'bg-blue-600 text-white border-blue-600'
                          : 'text-gray-500 hover:text-gray-700 border-gray-300 hover:bg-gray-50'
                      }`}
                    >
                      {page}
                    </a>
                  );
                })}
                
                {currentPage < totalPages && (
                  <a
                    href={`?${new URLSearchParams({...Object.fromEntries(searchParams), page: (currentPage + 1).toString()}).toString()}`}
                    class="px-3 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50"
                  >
                    Next
                  </a>
                )}
              </nav>
            </div>
          )}
        </div>
      </div>
    </div>
  </main>
</Layout>