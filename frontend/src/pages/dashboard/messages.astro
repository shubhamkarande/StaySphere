---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Messages - StaySphere">
  <main class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Messages</h1>
        <p class="mt-2 text-gray-600">Chat with hosts and guests</p>
      </div>

      <div class="bg-white rounded-lg shadow overflow-hidden" style="height: 600px;">
        <div class="flex h-full">
          <!-- Conversations List -->
          <div class="w-1/3 border-r border-gray-200 flex flex-col">
            <div class="p-4 border-b border-gray-200">
              <h2 class="text-lg font-semibold text-gray-900">Conversations</h2>
            </div>
            
            <div id="conversations-list" class="flex-1 overflow-y-auto">
              <div class="p-4 text-center text-gray-500">
                Loading conversations...
              </div>
            </div>
          </div>

          <!-- Chat Area -->
          <div class="flex-1 flex flex-col">
            <div id="chat-header" class="p-4 border-b border-gray-200 hidden">
              <div class="flex items-center">
                <img id="chat-avatar" src="" alt="" class="w-10 h-10 rounded-full mr-3">
                <div>
                  <h3 id="chat-name" class="font-semibold text-gray-900"></h3>
                  <p id="chat-listing" class="text-sm text-gray-600"></p>
                </div>
              </div>
            </div>

            <div id="messages-container" class="flex-1 overflow-y-auto p-4 space-y-4">
              <div class="text-center text-gray-500 mt-20">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
                <p class="mt-4">Select a conversation to start messaging</p>
              </div>
            </div>

            <div id="message-input-container" class="p-4 border-t border-gray-200 hidden">
              <form id="message-form" class="flex space-x-2">
                <input
                  type="text"
                  id="message-input"
                  placeholder="Type your message..."
                  class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
                <button
                  type="submit"
                  class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400"
                >
                  Send
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    const API_BASE = 'http://localhost:8000/api';
    let currentConversationId: number | null = null;
    let currentUserId: number | null = null;

    async function loadConversations() {
      const token = localStorage.getItem('auth_token');
      if (!token) {
        window.location.href = '/auth/login';
        return;
      }

      try {
        const response = await fetch(`${API_BASE}/conversations`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (response.ok) {
          const result = await response.json();
          const conversations = result.data || [];
          renderConversations(conversations);
        }
      } catch (error) {
        console.error('Failed to load conversations:', error);
      }
    }

    function renderConversations(conversations: any[]) {
      const container = document.getElementById('conversations-list');
      if (!container) return;

      if (conversations.length === 0) {
        container.innerHTML = `
          <div class="p-4 text-center text-gray-500">
            <p>No conversations yet</p>
            <p class="text-sm mt-2">Start by booking a stay or hosting guests</p>
          </div>
        `;
        return;
      }

      container.innerHTML = conversations.map(conversation => {
        const otherUser = conversation.guest?.id === currentUserId ? conversation.host : conversation.guest;
        const hasUnread = conversation.unread_count > 0;
        
        return `
          <div 
            class="conversation-item p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 ${hasUnread ? 'bg-blue-50' : ''}"
            onclick="selectConversation(${conversation.id})"
          >
            <div class="flex items-center">
              <img 
                src="${otherUser?.avatar || '/default-avatar.jpg'}" 
                alt="${otherUser?.name || 'User'}"
                class="w-12 h-12 rounded-full mr-3"
              />
              <div class="flex-1 min-w-0">
                <div class="flex items-center justify-between">
                  <h4 class="font-medium text-gray-900 truncate">${otherUser?.name || 'User'}</h4>
                  ${hasUnread ? `<span class="bg-blue-600 text-white text-xs rounded-full px-2 py-1">${conversation.unread_count}</span>` : ''}
                </div>
                <p class="text-sm text-gray-600 truncate">${conversation.listing?.title || 'Property'}</p>
                ${conversation.latest_message ? `
                  <p class="text-xs text-gray-500 truncate mt-1">${conversation.latest_message.message}</p>
                ` : ''}
              </div>
            </div>
          </div>
        `;
      }).join('');
    }

    async function selectConversation(conversationId: number) {
      currentConversationId = conversationId;
      
      // Update UI
      document.querySelectorAll('.conversation-item').forEach(item => {
        item.classList.remove('bg-blue-100');
      });
      event?.target?.closest('.conversation-item')?.classList.add('bg-blue-100');

      // Load messages
      await loadMessages(conversationId);
      
      // Show chat interface
      document.getElementById('chat-header')?.classList.remove('hidden');
      document.getElementById('message-input-container')?.classList.remove('hidden');
      
      // Mark as read
      await markAsRead(conversationId);
    }

    async function loadMessages(conversationId: number) {
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      try {
        const response = await fetch(`${API_BASE}/conversations/${conversationId}/messages`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (response.ok) {
          const result = await response.json();
          const messages = result.data || [];
          renderMessages(messages);
        }
      } catch (error) {
        console.error('Failed to load messages:', error);
      }
    }

    function renderMessages(messages: any[]) {
      const container = document.getElementById('messages-container');
      if (!container) return;

      if (messages.length === 0) {
        container.innerHTML = `
          <div class="text-center text-gray-500 mt-20">
            <p>No messages yet</p>
            <p class="text-sm mt-2">Start the conversation!</p>
          </div>
        `;
        return;
      }

      container.innerHTML = messages.map(message => {
        const isOwn = message.sender_id === currentUserId;
        return `
          <div class="flex ${isOwn ? 'justify-end' : 'justify-start'}">
            <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
              isOwn 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-200 text-gray-900'
            }">
              <p class="text-sm">${message.message}</p>
              <p class="text-xs mt-1 ${isOwn ? 'text-blue-100' : 'text-gray-500'}">
                ${formatMessageTime(message.created_at)}
              </p>
            </div>
          </div>
        `;
      }).join('');

      // Scroll to bottom
      container.scrollTop = container.scrollHeight;
    }

    async function sendMessage(message: string) {
      if (!currentConversationId) return;

      const token = localStorage.getItem('auth_token');
      if (!token) return;

      try {
        const response = await fetch(`${API_BASE}/conversations/${currentConversationId}/messages`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ message })
        });

        if (response.ok) {
          // Reload messages
          await loadMessages(currentConversationId);
          // Clear input
          const input = document.getElementById('message-input') as HTMLInputElement;
          if (input) input.value = '';
        }
      } catch (error) {
        console.error('Failed to send message:', error);
      }
    }

    async function markAsRead(conversationId: number) {
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      try {
        await fetch(`${API_BASE}/conversations/${conversationId}/read`, {
          method: 'PUT',
          headers: { 'Authorization': `Bearer ${token}` }
        });
      } catch (error) {
        console.error('Failed to mark as read:', error);
      }
    }

    function formatMessageTime(timestamp: string): string {
      const date = new Date(timestamp);
      const now = new Date();
      const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);

      if (diffInHours < 24) {
        return date.toLocaleTimeString('en-US', { 
          hour: 'numeric', 
          minute: '2-digit',
          hour12: true 
        });
      } else {
        return date.toLocaleDateString('en-US', { 
          month: 'short', 
          day: 'numeric' 
        });
      }
    }

    // Global function for selecting conversation
    (window as any).selectConversation = selectConversation;

    // Message form handler
    document.getElementById('message-form')?.addEventListener('submit', function(e) {
      e.preventDefault();
      const input = document.getElementById('message-input') as HTMLInputElement;
      if (input && input.value.trim()) {
        sendMessage(input.value.trim());
      }
    });

    // Load user info and conversations on page load
    document.addEventListener('DOMContentLoaded', async function() {
      const token = localStorage.getItem('auth_token');
      if (!token) {
        window.location.href = '/auth/login';
        return;
      }

      try {
        const userResponse = await fetch(`${API_BASE}/user`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (userResponse.ok) {
          const userData = await userResponse.json();
          currentUserId = userData.user.id;
          await loadConversations();
        }
      } catch (error) {
        console.error('Failed to load user data:', error);
      }
    });
  </script>
</Layout>