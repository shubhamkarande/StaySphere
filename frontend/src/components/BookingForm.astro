---
interface Props {
  listing: {
    id: number;
    price_per_night: number;
    cleaning_fee?: number;
    service_fee?: number;
    minimum_nights: number;
    maximum_nights: number;
  };
}

const { listing } = Astro.props;
---

<div class="bg-white border border-gray-300 rounded-lg shadow-lg p-6">
  <div class="flex items-center justify-between mb-4">
    <div>
      <span class="text-2xl font-bold">${listing.price_per_night}</span>
      <span class="text-gray-600"> / night</span>
    </div>
    <div class="text-sm text-gray-500">
      {listing.minimum_nights} night minimum
    </div>
  </div>

  <form id="booking-form" class="space-y-4">
    <input type="hidden" name="listing_id" value={listing.id} />
    
    <!-- Check-in / Check-out -->
    <div class="grid grid-cols-2 gap-0 border border-gray-300 rounded-lg overflow-hidden">
      <div class="p-3 border-r border-gray-300">
        <label class="block text-xs font-medium text-gray-700 mb-1">CHECK-IN</label>
        <input
          type="date"
          name="check_in"
          id="check-in"
          required
          class="w-full text-sm focus:outline-none"
        />
      </div>
      <div class="p-3">
        <label class="block text-xs font-medium text-gray-700 mb-1">CHECK-OUT</label>
        <input
          type="date"
          name="check_out"
          id="check-out"
          required
          class="w-full text-sm focus:outline-none"
        />
      </div>
    </div>

    <!-- Guests -->
    <div class="border border-gray-300 rounded-lg p-3">
      <label class="block text-xs font-medium text-gray-700 mb-1">GUESTS</label>
      <select
        name="guests"
        id="guests"
        required
        class="w-full text-sm focus:outline-none"
      >
        <option value="">Select guests</option>
        <option value="1">1 guest</option>
        <option value="2">2 guests</option>
        <option value="3">3 guests</option>
        <option value="4">4 guests</option>
        <option value="5">5 guests</option>
        <option value="6">6+ guests</option>
      </select>
    </div>

    <!-- Booking Summary -->
    <div id="booking-summary" class="hidden space-y-3 pt-4 border-t">
      <div class="flex justify-between text-sm">
        <span>${listing.price_per_night} x <span id="nights-count">0</span> nights</span>
        <span id="subtotal">$0</span>
      </div>
      
      {listing.cleaning_fee && (
        <div class="flex justify-between text-sm">
          <span>Cleaning fee</span>
          <span>${listing.cleaning_fee}</span>
        </div>
      )}
      
      {listing.service_fee && (
        <div class="flex justify-between text-sm">
          <span>Service fee</span>
          <span>${listing.service_fee}</span>
        </div>
      )}
      
      <div class="flex justify-between font-semibold pt-3 border-t">
        <span>Total</span>
        <span id="total-price">$0</span>
      </div>
    </div>

    <!-- Book Button -->
    <button
      type="submit"
      id="book-button"
      class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
      disabled
    >
      Check availability
    </button>
  </form>

  <p class="text-xs text-gray-500 text-center mt-4">
    You won't be charged yet
  </p>
</div>

<script define:vars={{ listing }}>
  const checkInInput = document.getElementById('check-in');
  const checkOutInput = document.getElementById('check-out');
  const guestsSelect = document.getElementById('guests');
  const bookButton = document.getElementById('book-button');
  const bookingSummary = document.getElementById('booking-summary');
  const nightsCount = document.getElementById('nights-count');
  const subtotal = document.getElementById('subtotal');
  const totalPrice = document.getElementById('total-price');

  // Set minimum date to today
  const today = new Date().toISOString().split('T')[0];
  checkInInput.min = today;

  // Update checkout minimum when checkin changes
  checkInInput.addEventListener('change', function() {
    const checkinDate = new Date(this.value);
    const nextDay = new Date(checkinDate);
    nextDay.setDate(nextDay.getDate() + 1);
    
    checkOutInput.min = nextDay.toISOString().split('T')[0];
    
    if (checkOutInput.value && checkOutInput.value <= this.value) {
      checkOutInput.value = '';
    }
    
    updateBookingSummary();
  });

  checkOutInput.addEventListener('change', updateBookingSummary);
  guestsSelect.addEventListener('change', updateBookingSummary);

  function updateBookingSummary() {
    const checkin = checkInInput.value;
    const checkout = checkOutInput.value;
    const guests = guestsSelect.value;

    if (checkin && checkout && guests) {
      const checkinDate = new Date(checkin);
      const checkoutDate = new Date(checkout);
      const nights = Math.ceil((checkoutDate - checkinDate) / (1000 * 60 * 60 * 24));

      if (nights >= listing.minimum_nights && nights <= listing.maximum_nights) {
        // Show summary
        bookingSummary.classList.remove('hidden');
        
        // Calculate prices
        const nightsTotal = listing.price_per_night * nights;
        const cleaningFee = listing.cleaning_fee || 0;
        const serviceFee = listing.service_fee || 0;
        const total = nightsTotal + cleaningFee + serviceFee;

        // Update display
        nightsCount.textContent = nights;
        subtotal.textContent = `$${nightsTotal}`;
        totalPrice.textContent = `$${total}`;

        // Enable book button
        bookButton.disabled = false;
        bookButton.textContent = 'Reserve';
      } else {
        bookingSummary.classList.add('hidden');
        bookButton.disabled = true;
        bookButton.textContent = `${listing.minimum_nights} night minimum`;
      }
    } else {
      bookingSummary.classList.add('hidden');
      bookButton.disabled = true;
      bookButton.textContent = 'Check availability';
    }
  }

  // Handle form submission
  document.getElementById('booking-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const token = localStorage.getItem('auth_token');
    if (!token) {
      // Redirect to login
      localStorage.setItem('redirect_after_login', window.location.href);
      window.location.href = '/auth/login';
      return;
    }

    const formData = new FormData(this);
    const bookingData = Object.fromEntries(formData.entries());

    try {
      bookButton.disabled = true;
      bookButton.textContent = 'Processing...';

      const response = await fetch('/api/bookings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(bookingData)
      });

      const result = await response.json();

      if (response.ok) {
        // Redirect to Stripe Checkout
        if (result.checkout_url) {
          window.location.href = result.checkout_url;
        } else {
          alert('Booking created successfully!');
          window.location.href = '/dashboard/bookings';
        }
      } else {
        throw new Error(result.message || 'Booking failed');
      }
    } catch (error) {
      console.error('Booking error:', error);
      alert('Failed to create booking. Please try again.');
      bookButton.disabled = false;
      bookButton.textContent = 'Reserve';
    }
  });
</script>