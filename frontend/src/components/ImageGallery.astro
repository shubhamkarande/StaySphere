---
interface Props {
  images: string[];
  title: string;
}

const { images, title } = Astro.props;
const primaryImage = images[0] || '/placeholder-image.jpg';
const additionalImages = images.slice(1, 5);
---

<div class="grid grid-cols-4 gap-2 h-96 rounded-lg overflow-hidden">
  <!-- Main Image -->
  <div class="col-span-2 row-span-2">
    <img
      src={primaryImage}
      alt={title}
      class="w-full h-full object-cover cursor-pointer hover:brightness-90 transition-all"
      onclick="openGallery(0)"
    />
  </div>
  
  <!-- Additional Images -->
  {additionalImages.map((image, index) => (
    <div class="relative">
      <img
        src={image}
        alt={`${title} - Image ${index + 2}`}
        class="w-full h-full object-cover cursor-pointer hover:brightness-90 transition-all"
        onclick={`openGallery(${index + 1})`}
      />
      {index === 3 && images.length > 5 && (
        <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center cursor-pointer hover:bg-opacity-40 transition-all"
             onclick={`openGallery(${index + 1})`}>
          <span class="text-white font-semibold">
            +{images.length - 5} more
          </span>
        </div>
      )}
    </div>
  ))}
</div>

<!-- Gallery Modal -->
<div id="gallery-modal" class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden">
  <div class="flex items-center justify-center h-full p-4">
    <div class="relative max-w-4xl max-h-full">
      <button
        onclick="closeGallery()"
        class="absolute top-4 right-4 text-white hover:text-gray-300 z-10"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      
      <img
        id="gallery-image"
        src=""
        alt=""
        class="max-w-full max-h-full object-contain"
      />
      
      <!-- Navigation -->
      <button
        id="prev-btn"
        onclick="previousImage()"
        class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 bg-black bg-opacity-50 rounded-full p-2"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <button
        id="next-btn"
        onclick="nextImage()"
        class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 bg-black bg-opacity-50 rounded-full p-2"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
      
      <!-- Image Counter -->
      <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white bg-black bg-opacity-50 px-3 py-1 rounded-full">
        <span id="image-counter">1 / {images.length}</span>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ images, title }}>
  let currentImageIndex = 0;
  
  function openGallery(index) {
    currentImageIndex = index;
    const modal = document.getElementById('gallery-modal');
    const image = document.getElementById('gallery-image');
    const counter = document.getElementById('image-counter');
    
    if (modal && image && counter) {
      image.src = images[currentImageIndex];
      image.alt = `${title} - Image ${currentImageIndex + 1}`;
      counter.textContent = `${currentImageIndex + 1} / ${images.length}`;
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }
  }
  
  function closeGallery() {
    const modal = document.getElementById('gallery-modal');
    if (modal) {
      modal.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }
  }
  
  function previousImage() {
    currentImageIndex = currentImageIndex > 0 ? currentImageIndex - 1 : images.length - 1;
    updateGalleryImage();
  }
  
  function nextImage() {
    currentImageIndex = currentImageIndex < images.length - 1 ? currentImageIndex + 1 : 0;
    updateGalleryImage();
  }
  
  function updateGalleryImage() {
    const image = document.getElementById('gallery-image');
    const counter = document.getElementById('image-counter');
    
    if (image && counter) {
      image.src = images[currentImageIndex];
      image.alt = `${title} - Image ${currentImageIndex + 1}`;
      counter.textContent = `${currentImageIndex + 1} / ${images.length}`;
    }
  }
  
  // Keyboard navigation
  document.addEventListener('keydown', function(e) {
    const modal = document.getElementById('gallery-modal');
    if (modal && !modal.classList.contains('hidden')) {
      if (e.key === 'Escape') {
        closeGallery();
      } else if (e.key === 'ArrowLeft') {
        previousImage();
      } else if (e.key === 'ArrowRight') {
        nextImage();
      }
    }
  });
  
  // Close modal when clicking outside image
  document.getElementById('gallery-modal')?.addEventListener('click', function(e) {
    if (e.target === this) {
      closeGallery();
    }
  });
</script>